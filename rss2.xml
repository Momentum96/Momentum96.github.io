<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>눈높이코딩</title>
    <link>https://aivillain.com/</link>
    
    <atom:link href="https://aivillain.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Momentum&#39;s blog</description>
    <pubDate>Tue, 26 Jan 2021 15:03:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Pytorch Neural Network</title>
      <link>https://aivillain.com/2021/01/26/en/Pytorch-Neural-Network/</link>
      <guid>https://aivillain.com/2021/01/26/en/Pytorch-Neural-Network/</guid>
      <pubDate>Mon, 25 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;이 글은
&lt;a href=&quot;/2021/</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>이 글은<a href="/2021/01/25/kr/Pytorch-Autograd/">한국어</a>로도 볼 수 있습니다.</div></article><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-info-circle mr-2"></i>My English is not good. So if there is a grammatical error, please leave a comment.</div></article><h3 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h3><hr><p>Can be created using the torch.nn package<br>nn uses autograd to define and differentiate models<br>nn.Module contains forward(input) method that returns layer and output</p><h3 id="Typical-Learning-Process-of-Neural-Networks"><a href="#Typical-Learning-Process-of-Neural-Networks" class="headerlink" title="Typical Learning Process of Neural Networks"></a>Typical Learning Process of Neural Networks</h3><hr><ul><li>Define a neural network with learnable parameters (or weights)</li><li>Repeat Dataset Input</li><li>Propagate inputs from neural networks</li><li>Calculating loss</li><li>Backprop the gradient to the neural network parameters.</li><li>Updating the weight of a neural networks<br>(New Weight = Existing Weight - Learning_rate * Gradient)</li></ul><h3 id="Define-Neural-Network"><a href="#Define-Neural-Network" class="headerlink" title="Define Neural Network"></a>Define Neural Network</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        1 input image channel, 6 output channels, 3x3 square convolution matrix</span></span><br><span class="line"><span class="string">        Convolutional Kernel Definitions</span></span><br><span class="line"><span class="string">        troch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0,</span></span><br><span class="line"><span class="string">        dilation=1, groups=1, bias=True)</span></span><br><span class="line"><span class="string">        in_channels(int) : Number of channel about input image. if rgb == 3</span></span><br><span class="line"><span class="string">        out_channels(int) : Number of channels created by convolution</span></span><br><span class="line"><span class="string">        kernel_size(int or tuple) : convoling_kernel size. (filter)</span></span><br><span class="line"><span class="string">        stride(int or tuple) : Stride size of convolution</span></span><br><span class="line"><span class="string">        default is 1, stride is the step size of the kernel when traversing the image</span></span><br><span class="line"><span class="string">        padding(int or tuple) : zero padding size</span></span><br><span class="line"><span class="string">        Default is 0 so zero padding is not applied if not set by default</span></span><br><span class="line"><span class="string">        self.conv1 = nn.Conv2d(1, 6, 3)</span></span><br><span class="line"><span class="string">        self.conv2 = nn.Conv2d(6, 16, 3)</span></span><br><span class="line"><span class="string">        Affine operation : y=Wx+b</span></span><br><span class="line"><span class="string">        self.fc1 = nn.Linear(16*6*6, 120) # 6*6 is image dimension</span></span><br><span class="line"><span class="string">        self.fc2 = nn.Linear(120, 84)</span></span><br><span class="line"><span class="string">        self.fc3 = nn.Linear(84, 10)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># Max pooling for (2, 2) size windows</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square number, specify only one number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:] <span class="comment"># All dimensions except batch dimensions</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure><p align="center">  <img src="https://cdn-images-1.medium.com/max/1200/1*1okwhewf5KCtIPaFib4XaA.gif"></p><p align="center"><em>2D convolution using a kernel size of 3, stride of 1 and padding</em></p><p>If you define a forward function only, the backward function is automatically defined using autograd.<br>You can use any Tensor operation in the forward function.<br>The model’s learnable parameters are returned by net.parameters()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line">print(<span class="built_in">len</span>(params))</span><br><span class="line">print(params[<span class="number">0</span>].size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enter any 32x32 value</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line">print(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set all parameters to zero degrees of change buffer,</span></span><br><span class="line"><span class="comment"># backpropagating to random values</span></span><br><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.rand(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># loss function</span></span><br><span class="line"><span class="comment"># Take output, target as a pair of inputs and calculate the estimate of</span></span><br><span class="line"><span class="comment"># how far the output is from the correct answer.</span></span><br><span class="line"><span class="comment"># nn.MSEloss calculates mean square error between output and target</span></span><br><span class="line"><span class="comment"># as a simple loss function</span></span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">target = torch.randn(<span class="number">10</span>) <span class="comment"># Example for comparison, random correct answer</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment"># Convert to same shape as output</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">print(loss)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d</span></span><br><span class="line"><span class="string">      -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear</span></span><br><span class="line"><span class="string">      -&gt; MSELoss</span></span><br><span class="line"><span class="string">      -&gt; loss</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># .grad Tensor with accumulated variability</span></span><br><span class="line">print(loss.grad_fn)</span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line"><span class="comment"># If you don&#x27;t eliminate the traditional changes,</span></span><br><span class="line"><span class="comment"># they accumulate in the existing ones.</span></span><br><span class="line">net.zero_grad()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>) <span class="comment"># Initialized to 0</span></span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward() <span class="comment"># loss = criterion(output, target)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Updating Weight</span></span><br><span class="line"><span class="comment"># Stochastic gradient descent(SGD)</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># implemented various renewal rules such as SGD, Nesterov-SGD, Adam,and RMSProp</span></span><br><span class="line"><span class="comment"># in a small package called torch.optim</span></span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Optimizer</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Training process</span></span><br><span class="line"><span class="comment"># Manually set the change chart buffer to zero using optimizer.zero_grad()</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">loss.backward()</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/Pytorch/">Pytorch</category>
      
      <category domain="https://aivillain.com/tags/Deep-learning/">Deep learning</category>
      
      
      <comments>https://aivillain.com/2021/01/26/en/Pytorch-Neural-Network/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch Autograd Practice</title>
      <link>https://aivillain.com/2021/01/26/en/Pytorch-Autograd-Practice/</link>
      <guid>https://aivillain.com/2021/01/26/en/Pytorch-Autograd-Practice/</guid>
      <pubDate>Mon, 25 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;이 글은
&lt;a href=&quot;/2021/</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>이 글은<a href="/2021/01/25/kr/Pytorch-Autograd/">한국어</a>로도 볼 수 있습니다.</div></article><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-info-circle mr-2"></i>My English is not good. So if there is a grammatical error, please leave a comment.</div></article><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># Record operations</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = x + <span class="number">2</span> <span class="comment"># Performing operations</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(y.grad_fn) <span class="comment"># This is the result of the operation, so it has grad_fn.</span></span><br><span class="line"></span><br><span class="line">z = y*y*<span class="number">3</span> <span class="comment"># z = (x+2)^2*3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"></span><br><span class="line">print(z, out)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">.requires_gard_(...) changes the requirements_grad value of the existing Tensor to</span></span><br><span class="line"><span class="string">inplace. If no input value is specified, default is False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">2</span>) <span class="comment"># default requires_gard = False</span></span><br><span class="line">a = ((a * <span class="number">3</span>) / (a - <span class="number">1</span>))</span><br><span class="line">print(a.requires_grad) <span class="comment"># False</span></span><br><span class="line">a.requires_grad_(<span class="literal">True</span>) <span class="comment"># Operate inplace because _ is attached to the behind</span></span><br><span class="line">print(a.requires_grad) <span class="comment"># True</span></span><br><span class="line">b = (a * a).<span class="built_in">sum</span>() <span class="comment"># Grad_fn because it is the result of an operation of True</span></span><br><span class="line">print(b.grad_fn)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. backprop of scalar value</span></span><br><span class="line"><span class="string"> = When the value is added to the differential result.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">x = a matrix containing two lines, two rows, 1</span></span><br><span class="line"><span class="string">y = x+2 == a matrix containing two-line, two-row, 3</span></span><br><span class="line"><span class="string">z = y*y*3 == a matrix containing two-line, two-row, 27 (3*(x+2)^2)</span></span><br><span class="line"><span class="string">out = Mean of z</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">out.backward() <span class="comment"># == out.backward(torch.tensor(1.))</span></span><br><span class="line"></span><br><span class="line">print(out)</span><br><span class="line">print(x.grad)</span><br><span class="line"><span class="comment"># The differential for x in the final equation in which x was used.</span></span><br><span class="line"><span class="comment"># (out = 3*(x+2)^2/4 -&gt; 3*(x+2)/2)</span></span><br><span class="line"><span class="comment"># (x = 1) (x = 1 is set in out.backward())</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. backprop of vector value</span></span><br><span class="line"><span class="string"> = Jacobian Matrix</span></span><br><span class="line"><span class="string"> (a matrix of all partial differential values for each dimension,</span></span><br><span class="line"><span class="string"> given that there is a function from m to n.)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Typical differential: deals with only one-variable functions</span></span><br><span class="line"><span class="string"> Partial differential: In multivariate functions,</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> only one variable is a variable and the other is a constant.</span></span><br><span class="line"><span class="string"> The vector&#x27;s backprop is any value multiplied by the partial differential matrix.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * <span class="number">2</span> <span class="comment"># 2x</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span> <span class="comment"># 2^n*x</span></span><br><span class="line"></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">v = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">y.backward(v) <span class="comment"># 2^n multiplied by 0.1, 1.0, 0.0001</span></span><br><span class="line"></span><br><span class="line">print(x.grad)</span><br><span class="line"></span><br><span class="line">print(x.requires_grad)</span><br><span class="line">print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad(): <span class="comment"># Stop Recording Tensor Operations</span></span><br><span class="line">    print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line">print(x.requires_grad)</span><br><span class="line">y = x.detach() <span class="comment"># Create a new Tensor with the same content but false require_grad</span></span><br><span class="line">print(y.requires_grad)</span><br><span class="line">print(x.eq(y).<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/Pytorch/">Pytorch</category>
      
      <category domain="https://aivillain.com/tags/Deep-learning/">Deep learning</category>
      
      
      <comments>https://aivillain.com/2021/01/26/en/Pytorch-Autograd-Practice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch Autograd 실습</title>
      <link>https://aivillain.com/2021/01/26/kr/Pytorch-Autograd-Practice/</link>
      <guid>https://aivillain.com/2021/01/26/kr/Pytorch-Autograd-Practice/</guid>
      <pubDate>Mon, 25 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;This article is also</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in<a href="/2021/01/26/en/Pytorch-Autograd-Practice/">English</a>.</div></article><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 연산을 기록</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = x + <span class="number">2</span> <span class="comment"># 연산 수행</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(y.grad_fn) <span class="comment"># 연산 결과이므로 grad_fn을 가짐</span></span><br><span class="line"></span><br><span class="line">z = y*y*<span class="number">3</span> <span class="comment"># z = (x+2)^2*3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"></span><br><span class="line">print(z, out)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">.requires_gard_(...)는 기존 Tensor의 requires_grad 값을 inplace 방식으로 변경.</span></span><br><span class="line"><span class="string">입력값 지정되지 않으면 default는 False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 기본 requires_gard = False</span></span><br><span class="line">a = ((a * <span class="number">3</span>) / (a - <span class="number">1</span>))</span><br><span class="line">print(a.requires_grad) <span class="comment"># False</span></span><br><span class="line">a.requires_grad_(<span class="literal">True</span>) <span class="comment"># _가 뒤에 붙어있기 때문에 inplace 연산</span></span><br><span class="line">print(a.requires_grad) <span class="comment"># True</span></span><br><span class="line">b = (a * a).<span class="built_in">sum</span>() <span class="comment"># True의 연산 결과이므로 grad_fn 가짐</span></span><br><span class="line">print(b.grad_fn)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 역전파(backprop)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. scalar 값의 backprop</span></span><br><span class="line"><span class="string"> = 미분 결과에 해당 값을 넣었을 때.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">x = 2행 2열짜리 1이 들어있는 행렬</span></span><br><span class="line"><span class="string">y = x+2 == 2행 2열짜리 3이 들어있는 행렬</span></span><br><span class="line"><span class="string">z = y*y*3 == 2행 2열 27이 들어있는 행렬 (3*(x+2)^2)</span></span><br><span class="line"><span class="string">out = z의 평균</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">out.backward() <span class="comment"># == out.backward(torch.tensor(1.))</span></span><br><span class="line"></span><br><span class="line">print(out)</span><br><span class="line">print(x.grad)</span><br><span class="line"><span class="comment"># x가 사용된 최종 연산식에서 x에대한 미분(out = 3*(x+2)^2/4 -&gt; 3*(x+2)/2)</span></span><br><span class="line"><span class="comment"># (x = 1) (x = 1은 out.backward()에서 설정됨)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. vector의 backprop</span></span><br><span class="line"><span class="string"> = Jacobian Matrix</span></span><br><span class="line"><span class="string"> (m차원에서 n차원으로 가는 함수가 있다고 할 때 각각 차원에 대해</span></span><br><span class="line"><span class="string"> 모든 편미분 값을 모아놓은 matrix)</span></span><br><span class="line"><span class="string"> 일반적인 미분 : 1변수 함수만 다룸</span></span><br><span class="line"><span class="string"> 편미분 : 다변수 함수에서 한 변수만 변수로, 나머지 변수는 상수로</span></span><br><span class="line"><span class="string"> vector의 backprop은 편미분값 matrix에 곱해주는 어떤 값</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * <span class="number">2</span> <span class="comment"># 2x</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span> <span class="comment"># 2^n*x</span></span><br><span class="line"></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">v = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">y.backward(v) <span class="comment"># 2^n에 0.1, 1.0, 0.0001 곱해준 값</span></span><br><span class="line"></span><br><span class="line">print(x.grad)</span><br><span class="line"></span><br><span class="line">print(x.requires_grad)</span><br><span class="line">print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad(): <span class="comment"># Tensor 연산 기록 멈춤</span></span><br><span class="line">    print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line">print(x.requires_grad)</span><br><span class="line">y = x.detach() <span class="comment"># content는 같지만 require_grad가 False인 새로운 Tensor 생성</span></span><br><span class="line">print(y.requires_grad)</span><br><span class="line">print(x.eq(y).<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/">파이토치</category>
      
      <category domain="https://aivillain.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/">딥러닝</category>
      
      
      <comments>https://aivillain.com/2021/01/26/kr/Pytorch-Autograd-Practice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch 신경망</title>
      <link>https://aivillain.com/2021/01/26/kr/Pytorch-Neural-Network/</link>
      <guid>https://aivillain.com/2021/01/26/kr/Pytorch-Neural-Network/</guid>
      <pubDate>Mon, 25 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;This article is also</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in<a href="/2021/01/26/en/Pytorch-Neural-Network/">English</a>.</div></article><h3 id="신경망"><a href="#신경망" class="headerlink" title="신경망"></a>신경망</h3><hr><p>torch.nn 패키지를 사용하여 생성 가능<br>nn은 모델을 정의하고 미분하는데 autograd 사용<br>nn.Module은 layer와 output을 반환하는 forward(input) 메서드 포함</p><h3 id="신경망의-일반적인-학습-과정"><a href="#신경망의-일반적인-학습-과정" class="headerlink" title="신경망의 일반적인 학습 과정"></a>신경망의 일반적인 학습 과정</h3><hr><ul><li>학습 가능한 매개변수(또는 가중치(weight))를 갖는 신경망 정의</li><li>데이터셋 입력 반복</li><li>입력을 신경망에서 전파</li><li>손실(loss) 계산</li><li>변화도(gradient)를 신경망 매개변수들에 역전파</li><li>신경망의 가중치 갱신<br>(새로운 가중치 = 기존 가중치 - 학습률(learning_rate) * 변화도(gradient)</li></ul><h3 id="신경망-정의"><a href="#신경망-정의" class="headerlink" title="신경망 정의"></a>신경망 정의</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        입력 이미지 채널 1개, 출력 채널 6개, 3x3의 정사각 컨볼루션 행렬</span></span><br><span class="line"><span class="string">        컨볼루션 커널 정의</span></span><br><span class="line"><span class="string">        troch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0,</span></span><br><span class="line"><span class="string">        dilation=1, groups=1, bias=True)</span></span><br><span class="line"><span class="string">        in_channels(int) : input image의 channel수. rgb면 3</span></span><br><span class="line"><span class="string">        out_channels(int) : convolution에 의해 생성된 channel 수</span></span><br><span class="line"><span class="string">        kernel_size(int or tuple) : convoling_kernel 크기. (filter)</span></span><br><span class="line"><span class="string">        stride(int or tuple) : convolution의 stride를 얼만큼 줄 것인가.</span></span><br><span class="line"><span class="string">        default는 1, stride는 이미지 횡단 시 커널의 스텝 사이즈</span></span><br><span class="line"><span class="string">        padding(int or tuple) : zero padding을 input 양쪽 인자만큼.</span></span><br><span class="line"><span class="string">        default는 0이라서 기본적으로 설정하지 않을 경우 zero padding 적용하지 않음</span></span><br><span class="line"><span class="string">        self.conv1 = nn.Conv2d(1, 6, 3)</span></span><br><span class="line"><span class="string">        self.conv2 = nn.Conv2d(6, 16, 3)</span></span><br><span class="line"><span class="string">        아핀(affine) 연산: y = Wx + b</span></span><br><span class="line"><span class="string">        self.fc1 = nn.Linear(16*6*6, 120) # 6*6은 이미지 차원</span></span><br><span class="line"><span class="string">        self.fc2 = nn.Linear(120, 84)</span></span><br><span class="line"><span class="string">        self.fc3 = nn.Linear(84, 10)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># (2, 2) 크기 윈도우에 대해 맥스 풀링(max pooling)</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 크기가 제곱수라면 하나의 숫자만을 특정</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:] <span class="comment"># 배치 차원을 제외한 모든 차원</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure><p align="center">  <img src="https://cdn-images-1.medium.com/max/1200/1*1okwhewf5KCtIPaFib4XaA.gif"></p><p align="center"><em>2D convolution using a kernel size of 3, stride of 1 and padding</em></p><p>forward 함수만 정의하면, backward 함수는 autograd를 사용하여 자동으로 정의됨.<br>forward 함수에서는 어떠한 Tensor 연산을 사용해도 됨<br>모델의 학습 가능 매개변수는 net.parameters()에 의해 반환됨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line">print(<span class="built_in">len</span>(params))</span><br><span class="line">print(params[<span class="number">0</span>].size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 임의의 32x32값 입력</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line">print(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모든 매개변수의 변화도 버퍼를 0으로 설정, 무작위 값으로 역전파</span></span><br><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.rand(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 손실 함수</span></span><br><span class="line"><span class="comment"># output, target을 한 쌍의 입력으로 받아, 출력이 정답으로부터 얼마나 멀리 떨어져있는지</span></span><br><span class="line"><span class="comment"># 추정하는 값을 계산</span></span><br><span class="line"><span class="comment"># 간단한 손실 함수로 출력과 대상 간 평균제곱오차를 계산하는 nn.MSEloss가 있음</span></span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">target = torch.randn(<span class="number">10</span>) <span class="comment"># 비교를 위한 예시, 임의의 정답</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment"># 출력과 같은 shape로 변환</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">print(loss)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d</span></span><br><span class="line"><span class="string">      -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear</span></span><br><span class="line"><span class="string">      -&gt; MSELoss</span></span><br><span class="line"><span class="string">      -&gt; loss</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 변화도가 누적된 .grad Tensor</span></span><br><span class="line">print(loss.grad_fn)</span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 역전파</span></span><br><span class="line"><span class="comment"># 기존 변화도를 없애지 않으면 기존의 변화도에 누적됨</span></span><br><span class="line">net.zero_grad()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>) <span class="comment"># 0으로 초기화되어있음</span></span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward() <span class="comment"># loss = criterion(output, target)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 가중치 갱신</span></span><br><span class="line"><span class="comment"># 확률적 경사하강법</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.optim이라는 작은 패키지에 SGD, Nesterov-SGD, Adam, RMSProp등</span></span><br><span class="line"><span class="comment"># 다양한 갱신 규칙을 구현해두었음</span></span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optimizer 생성</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 학습 과정</span></span><br><span class="line"><span class="comment"># optimizer.zero_grad()를 사용하여 수동으로 변화도 버퍼를 0으로 설정</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">loss.backward()</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/">파이토치</category>
      
      <category domain="https://aivillain.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/">딥러닝</category>
      
      
      <comments>https://aivillain.com/2021/01/26/kr/Pytorch-Neural-Network/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch Autograd</title>
      <link>https://aivillain.com/2021/01/25/en/Pytorch-Autograd/</link>
      <guid>https://aivillain.com/2021/01/25/en/Pytorch-Autograd/</guid>
      <pubDate>Sun, 24 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;이 글은
&lt;a href=&quot;/2021/</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>이 글은<a href="/2021/01/25/kr/Pytorch-Autograd/">한국어</a>로도 볼 수 있습니다.</div></article><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-info-circle mr-2"></i>My English is not good. So if there is a grammatical error, please leave a comment.</div></article><h3 id="Autogard"><a href="#Autogard" class="headerlink" title="Autogard"></a>Autogard</h3><hr><ul><li>autogard package provides automatic differentiation for all operations of the Tensor.<br>  Setting the <strong>.requires_gard property to True</strong> in the torch.Tensor class tracks all operations performed on that sensor.<br>  After the calculation is complete, you can call <strong>.backward()</strong> to <strong>automatically calculate the gradient</strong></li></ul><ul><li>To stop Tensor from tracking records, you can call <strong>.detach()</strong> to separate from the computational history<br>  Code blocks can be wrapped <strong>with torch.no_gard():</strong> to avoid historical tracking and memory usage<br>  Useful for evaluating models with learnable parameters, set to <strong>require_guard=True</strong>, although gradients are not required.</li></ul><ul><li>Function Class<br>  Tensor and Function are interconnected and encode all computational processes to create non-circulating graphs<br>  Each Tensor has a <strong>.gard_fn</strong> property, which refers to the Function that generated the Tensor<br>  <strong>(The gradient_fn of the user-generated Tensor is None)</strong><br>  The derivative calculation calls the .backward() of the Tensor<br>  Backward does not require factors if Tensor is Scally, but when it has <strong>multiple elements, it is necessary to shape the Tensor as a factor of gradient</strong>.</li></ul>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/Pytorch/">Pytorch</category>
      
      <category domain="https://aivillain.com/tags/Deep-learning/">Deep learning</category>
      
      
      <comments>https://aivillain.com/2021/01/25/en/Pytorch-Autograd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Create, Operate, Convert Pytorch Tensor</title>
      <link>https://aivillain.com/2021/01/25/en/Pytorch-Tensor/</link>
      <guid>https://aivillain.com/2021/01/25/en/Pytorch-Tensor/</guid>
      <pubDate>Sun, 24 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;이 글은
&lt;a href=&quot;/2021/</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>이 글은<a href="/2021/01/25/kr/Pytorch-Tensor/">한국어</a>로도 볼 수 있습니다.</div></article><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-info-circle mr-2"></i>My English is not good. So if there is a grammatical error, please leave a comment.</div></article><h3 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch?"></a>Pytorch?</h3><hr><p>Python Library Helps Build Deep Learning Projects<br>Provides a tensor, a core data structure (multi-dimensional array similar to the numpy array)<br>Tensor accelerates mathematical operations (GPU available)</p><p>It is mostly made of C++ and CUDA for performance reasons.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><hr><p><a href="https://pytorch.org/get-started/locally/">PyTorch Installation Link</a></p><p>Copy Run this Command after setting it to your environment.</p><h3 id="Check-GPU"><a href="#Check-GPU" class="headerlink" title="Check GPU"></a>Check GPU</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">print(torch.cuda.get_device_name(<span class="number">0</span>))</span><br><span class="line">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><h3 id="Create-Tensor"><a href="#Create-Tensor" class="headerlink" title="Create Tensor"></a>Create Tensor</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The values that existed in the memory allocated at that time appear as</span></span><br><span class="line"><span class="comment"># initial values.</span></span><br><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># Randomly initialized matrix (0 = x &lt; 1)</span></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>) </span><br><span class="line"><span class="comment"># dtype = long, Matrix filled with zeros</span></span><br><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long) </span><br><span class="line"><span class="comment"># Create tensor with list</span></span><br><span class="line">x = torch.tensor([<span class="number">5.5</span>, <span class="number">3</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create new Tensor based on existing Tensor</span></span><br><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double) </span><br><span class="line"><span class="comment"># Create new Tensor based on existing Tensor</span></span><br><span class="line">x = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>) </span><br><span class="line"><span class="comment"># Obtain matrix size, return torch.Size supports tuple types, all tuple operations</span></span><br><span class="line">x.size() </span><br></pre></td></tr></table></figure><h3 id="Tensor-Operation"><a href="#Tensor-Operation" class="headerlink" title="Tensor Operation"></a>Tensor Operation</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Operation 1</span></span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>) </span><br><span class="line">print(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Operation 2</span></span><br><span class="line">print(torch.add(x, y)) </span><br><span class="line"></span><br><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># Operation 3</span></span><br><span class="line">torch.add(x, y, out=result) </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="Change-Tensor-shape-and-convert-to-numpy-array"><a href="#Change-Tensor-shape-and-convert-to-numpy-array" class="headerlink" title="Change Tensor shape and convert to numpy array"></a>Change Tensor shape and convert to numpy array</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># When changing size and shape of sensor, use torch.view</span></span><br><span class="line">x = torch.rand(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">print(x.size(), y.size(), z.size())</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># If only one value exists in the tensor, a numeric value can be obtained</span></span><br><span class="line"><span class="comment"># using .item()</span></span><br><span class="line">print(x.item()) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert torch tensor to numpy array</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = a.numpy()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h3 id="CPU-GPU-Tensor-Change"><a href="#CPU-GPU-Tensor-Change" class="headerlink" title="CPU, GPU Tensor Change"></a>CPU, GPU Tensor Change</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run only in CUDA-enabled environments (GPU environments)</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available(): </span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">    <span class="comment"># Create a direct tensor on a GPU</span></span><br><span class="line">    y = torch.ones_like(x, device=device) </span><br><span class="line">    <span class="comment"># Change CPU Tensor to GPU Tensor</span></span><br><span class="line">    x = x.to(device) </span><br><span class="line">    z = x + y</span><br><span class="line">    print(z)</span><br><span class="line">    print(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/Pytorch/">Pytorch</category>
      
      <category domain="https://aivillain.com/tags/Deep-learning/">Deep learning</category>
      
      
      <comments>https://aivillain.com/2021/01/25/en/Pytorch-Tensor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch Autograd</title>
      <link>https://aivillain.com/2021/01/25/kr/Pytorch-Autograd/</link>
      <guid>https://aivillain.com/2021/01/25/kr/Pytorch-Autograd/</guid>
      <pubDate>Sun, 24 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;This article is also</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in<a href="/2021/01/25/en/Pytorch-Autograd/">English</a>.</div></article><h3 id="Autogard-자동-미분"><a href="#Autogard-자동-미분" class="headerlink" title="Autogard (자동 미분)"></a>Autogard (자동 미분)</h3><hr><ul><li>autogard 패키지는 Tensor의 모든 연산에 대한 자동 미분 제공<br>  torch.Tensor 클래스에서 <strong>.requires_gard 속성을 True로 설정</strong>하면 해당 tensor에서 이뤄진 모든 연산들을 추적(track)<br>  계산이 완료된 후 <strong>.backward()**를 호출하여 **변화도(gradient)를 자동으로 계산</strong>할 수 있음</li></ul><ul><li>Tensor가 기록 추적하는 것을 중단시키려면 <strong>.detach()**를 호출하여 연산 기록으로부터 분리할 수 있음<br>  기록 추적 및 메모리 사용을 방지하기 위해 코드 블럭을 **with torch.no_gard():</strong> 로 감쌀 수 있음<br>  변화도(gradient)는 필요 없지만 <strong>requires_guard=True로 설정</strong>되어 학습 가능한 매개변수를 갖는 모델 평가 시 유용</li></ul><ul><li>Function 클래스<br>  Tensor와 Function은 서로 연결되어 있으며, 모든 연산 과정을 부호화(encode)하여 순환하지 않는 그래프를 생성<br>  각 Tensor는 <strong>.gard_fn 속성</strong>을 갖는데, 이는 Tensor를 생성한 Function을 참고함<br>  <strong>(사용자 생성 Tensor의 grad_fn은 None)</strong><br>  도함수 계산은 Tensor의 .backward() 호출<br>  Tensor가 스칼리인 경우 backward에 인자 필요 없으나 <strong>여러 요소를 가질 때는 tensor의 모양을 gradient의 인자로 지정</strong>할 필요가 있음</li></ul>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/">파이토치</category>
      
      <category domain="https://aivillain.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/">딥러닝</category>
      
      
      <comments>https://aivillain.com/2021/01/25/kr/Pytorch-Autograd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pytorch 텐서 생성, 연산, 변환</title>
      <link>https://aivillain.com/2021/01/25/kr/Pytorch-Tensor/</link>
      <guid>https://aivillain.com/2021/01/25/kr/Pytorch-Tensor/</guid>
      <pubDate>Sun, 24 Jan 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;This article is also</description>
        
      
      
      
      <content:encoded><![CDATA[<article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in<a href="/2021/01/25/en/Pytorch-Tensor/">English</a>.</div></article><h3 id="Pytorch란"><a href="#Pytorch란" class="headerlink" title="Pytorch란?"></a>Pytorch란?</h3><hr><p>딥러닝 프로젝트 빌드를 위해 도움을 주는 파이썬 라이브러리<br>코어 데이터 구조인 텐서를 제공 (numpy 배열과 유사한 다차원 배열)<br>텐서는 수학적 연산을 가속화 (GPU 사용 가능)</p><p>성능적인 이유로 대부분 C++과 CUDA로 만들어져있음.</p><h3 id="설치방법"><a href="#설치방법" class="headerlink" title="설치방법"></a>설치방법</h3><hr><p><a href="https://pytorch.org/get-started/locally/">PyTorch 설치 링크</a></p><p>본인의 환경에 맞게 설정 후 Run this Command 명령어 복사</p><h3 id="GPU-확인"><a href="#GPU-확인" class="headerlink" title="GPU 확인"></a>GPU 확인</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">print(torch.cuda.get_device_name(<span class="number">0</span>))</span><br><span class="line">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><h3 id="Tensor-생성"><a href="#Tensor-생성" class="headerlink" title="Tensor 생성"></a>Tensor 생성</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그 시점에 할당된 메모리에 존재하던 값들이 초기값으로 나타남</span></span><br><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 무작위로 초기화된 행렬 (0 &lt;= x &lt; 1)</span></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>) </span><br><span class="line"><span class="comment"># dtype = long, 0으로 채워진 행렬</span></span><br><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long) </span><br><span class="line"><span class="comment"># list를 사용하여 직접 tensor 생성</span></span><br><span class="line">x = torch.tensor([<span class="number">5.5</span>, <span class="number">3</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 기존 tensor를 바탕으로 새로운 tensor 생성</span></span><br><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double) </span><br><span class="line"><span class="comment"># 기존 tensor를 바탕으로 새로운 tensor 생성</span></span><br><span class="line">x = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>) </span><br><span class="line"><span class="comment"># 행렬 크기 구하기, 반환인 torch.Size는 튜플 타입, 모든 튜플 연산 지원</span></span><br><span class="line">x.size() </span><br></pre></td></tr></table></figure><h3 id="Tensor-연산"><a href="#Tensor-연산" class="headerlink" title="Tensor 연산"></a>Tensor 연산</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 연산 문법 1</span></span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>) </span><br><span class="line">print(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 연산 문법 2</span></span><br><span class="line">print(torch.add(x, y)) </span><br><span class="line"></span><br><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 연산 문법 3</span></span><br><span class="line">torch.add(x, y, out=result) </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="Tensor-shape-변경-및-numpy-배열로-변환"><a href="#Tensor-shape-변경-및-numpy-배열로-변환" class="headerlink" title="Tensor shape 변경 및 numpy 배열로 변환"></a>Tensor shape 변경 및 numpy 배열로 변환</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensor의 size, shape 변경 시에는 torch.view 사용</span></span><br><span class="line">x = torch.rand(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">print(x.size(), y.size(), z.size())</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># tensor에 하나의 값만 존재한다면 .item()을 사용하여 숫자 값 얻을 수 있음</span></span><br><span class="line">print(x.item()) </span><br><span class="line"></span><br><span class="line"><span class="comment"># torch tensor를 numpy 배열로 변환</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = a.numpy()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h3 id="CPU-GPU-Tensor-변환"><a href="#CPU-GPU-Tensor-변환" class="headerlink" title="CPU, GPU Tensor 변환"></a>CPU, GPU Tensor 변환</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA 사용 가능 환경(GPU 환경)에서만 실행</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available(): </span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">    <span class="comment"># GPU 상 직접 tensor 생성</span></span><br><span class="line">    y = torch.ones_like(x, device=device) </span><br><span class="line">    <span class="comment"># CPU 텐서를 GPU 텐서로 변경</span></span><br><span class="line">    x = x.to(device) </span><br><span class="line">    z = x + y</span><br><span class="line">    print(z)</span><br><span class="line">    print(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://aivillain.com/categories/Pytorch/">Pytorch</category>
      
      
      <category domain="https://aivillain.com/tags/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/">파이토치</category>
      
      <category domain="https://aivillain.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/">딥러닝</category>
      
      
      <comments>https://aivillain.com/2021/01/25/kr/Pytorch-Tensor/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
